from os import access
from matplotlib import pyplot as plt
import numpy as np
from scipy import interpolate
import requests
import matplotlib
import mpld3
from todo_app.data.strava_client import StravaClient

laps = [
    {
        "moving_time": 60*19,
        "distance": 5000,
    },
    {
        "moving_time": 60,
        "distance": 400,
    },
    {
        "moving_time": 60,
        "distance": 400,
    },
]

mile = 1609

distances = [1500, 1*mile, 3000, 2*mile, 5000, 8000, 5*mile, 10000, 15000, 10*mile, 20000, 13.1*mile, 25000, 30000, 26.2*mile]
vdots = [85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30]

times = np.array([[  203.,   219.,   434.,   468.,   757.,  1250.,  1258.,  1579.,
         2417.,  2606.,  3280.,  3470.,  4173.,  5073.,  7270.],
       [  205.,   221.,   438.,   473.,   765.,  1262.,  1270.,  1594.,
         2442.,  2633.,  3314.,  3505.,  4215.,  5125.,  7344.],
       [  207.,   224.,   443.,   478.,   773.,  1276.,  1284.,  1611.,
         2466.,  2659.,  3348.,  3541.,  4259.,  5178.,  7420.],
       [  209.,   226.,   447.,   483.,   781.,  1289.,  1297.,  1627.,
         2492.,  2687.,  3383.,  3578.,  4303.,  5232.,  7497.],
       [  211.,   228.,   452.,   488.,   789.,  1302.,  1310.,  1644.,
         2518.,  2715.,  3418.,  3615.,  4348.,  5287.,  7577.],
       [  214.,   231.,   457.,   494.,   798.,  1316.,  1324.,  1661.,
         2545.,  2744.,  3454.,  3654.,  4395.,  5344.,  7658.],
       [  216.,   233.,   463.,   500.,   806.,  1330.,  1338.,  1679.,
         2572.,  2773.,  3492.,  3694.,  4443.,  5402.,  7742.],
       [  218.,   236.,   468.,   505.,   815.,  1344.,  1352.,  1697.,
         2600.,  2804.,  3531.,  3735.,  4492.,  5462.,  7827.],
       [  221.,   238.,   473.,   511.,   824.,  1359.,  1368.,  1716.,
         2629.,  2835.,  3570.,  3776.,  4541.,  5522.,  7914.],
       [  224.,   242.,   478.,   517.,   834.,  1375.,  1383.,  1735.,
         2658.,  2866.,  3610.,  3819.,  4593.,  5585.,  8003.],
       [  226.,   244.,   484.,   523.,   843.,  1390.,  1398.,  1754.,
         2688.,  2899.,  3652.,  3863.,  4646.,  5649.,  8095.],
       [  229.,   247.,   490.,   529.,   853.,  1406.,  1414.,  1774.,
         2719.,  2932.,  3694.,  3908.,  4700.,  5714.,  8189.],
       [  232.,   250.,   496.,   535.,   863.,  1422.,  1431.,  1795.,
         2751.,  2967.,  3737.,  3954.,  4755.,  5782.,  8285.],
       [  234.,   253.,   502.,   542.,   873.,  1439.,  1448.,  1816.,
         2784.,  3002.,  3783.,  4002.,  4813.,  5851.,  8384.],
       [  237.,   256.,   508.,   549.,   884.,  1456.,  1465.,  1838.,
         2818.,  3039.,  3829.,  4051.,  4871.,  5922.,  8486.],
       [  240.,   259.,   514.,   556.,   895.,  1474.,  1483.,  1860.,
         2852.,  3076.,  3876.,  4101.,  4931.,  5995.,  8590.],
       [  243.,   263.,   521.,   563.,   906.,  1492.,  1501.,  1883.,
         2888.,  3115.,  3924.,  4152.,  4993.,  6070.,  8697.],
       [  246.,   266.,   528.,   570.,   918.,  1511.,  1520.,  1906.,
         2924.,  3154.,  3974.,  4205.,  5056.,  6147.,  8807.],
       [  250.,   270.,   535.,   577.,   929.,  1530.,  1540.,  1931.,
         2962.,  3195.,  4026.,  4260.,  5122.,  6226.,  8920.],
       [  253.,   273.,   542.,   585.,   942.,  1550.,  1559.,  1955.,
         3000.,  3236.,  4079.,  4316.,  5189.,  6308.,  9036.],
       [  256.,   277.,   549.,   593.,   954.,  1570.,  1580.,  1981.,
         3040.,  3279.,  4133.,  4373.,  5258.,  6391.,  9155.],
       [  260.,   281.,   557.,   601.,   967.,  1592.,  1601.,  2008.,
         3081.,  3323.,  4190.,  4433.,  5329.,  6477.,  9278.],
       [  264.,   285.,   565.,   610.,   980.,  1613.,  1623.,  2035.,
         3123.,  3369.,  4247.,  4494.,  5402.,  6566.,  9404.],
       [  267.,   289.,   573.,   618.,   994.,  1635.,  1645.,  2063.,
         3167.,  3416.,  4307.,  4557.,  5478.,  6657.,  9534.],
       [  271.,   293.,   581.,   627.,  1008.,  1658.,  1669.,  2092.,
         3212.,  3465.,  4368.,  4622.,  5555.,  6751.,  9668.],
       [  275.,   297.,   590.,   637.,  1023.,  1682.,  1693.,  2122.,
         3258.,  3515.,  4431.,  4689.,  5635.,  6848.,  9805.],
       [  279.,   302.,   598.,   646.,  1037.,  1706.,  1716.,  2152.,
         3306.,  3566.,  4497.,  4758.,  5718.,  6948.,  9947.],
       [  284.,   306.,   608.,   656.,  1053.,  1732.,  1742.,  2184.,
         3355.,  3620.,  4565.,  4830.,  5804.,  7051., 10094.],
       [  288.,   311.,   617.,   666.,  1069.,  1758.,  1769.,  2217.,
         3406.,  3674.,  4634.,  4903.,  5891.,  7157., 10245.],
       [  293.,   316.,   627.,   677.,  1085.,  1785.,  1795.,  2251.,
         3459.,  3732.,  4706.,  4980.,  5983.,  7267., 10400.],
       [  297.,   321.,   637.,   688.,  1102.,  1812.,  1823.,  2286.,
         3513.,  3790.,  4780.,  5058.,  6076.,  7380., 10561.],
       [  302.,   327.,   647.,   699.,  1120.,  1841.,  1852.,  2322.,
         3570.,  3852.,  4857.,  5140.,  6173.,  7498., 10727.],
       [  307.,   332.,   658.,   710.,  1138.,  1871.,  1883.,  2360.,
         3628.,  3914.,  4937.,  5224.,  6274.,  7619., 10899.],
       [  313.,   338.,   669.,   722.,  1157.,  1902.,  1914.,  2399.,
         3689.,  3980.,  5019.,  5311.,  6377.,  7744., 11076.],
       [  318.,   344.,   681.,   735.,  1176.,  1934.,  1946.,  2439.,
         3751.,  4047.,  5105.,  5402.,  6485.,  7873., 11259.],
       [  324.,   350.,   693.,   748.,  1197.,  1967.,  1979.,  2481.,
         3816.,  4117.,  5193.,  5495.,  6596.,  8007., 11449.],
       [  330.,   356.,   705.,   761.,  1218.,  2002.,  2014.,  2524.,
         3884.,  4190.,  5285.,  5592.,  6712.,  8147., 11646.],
       [  336.,   363.,   718.,   775.,  1239.,  2038.,  2050.,  2570.,
         3953.,  4265.,  5380.,  5693.,  6832.,  8291., 11849.],
       [  342.,   370.,   732.,   790.,  1262.,  2074.,  2087.,  2616.,
         4026.,  4344.,  5479.,  5798.,  6956.,  8440., 12060.],
       [  349.,   377.,   746.,   805.,  1285.,  2113.,  2126.,  2665.,
         4102.,  4426.,  5582.,  5907.,  7086.,  8596., 12279.],
       [  356.,   385.,   760.,   820.,  1310.,  2154.,  2167.,  2716.,
         4180.,  4510.,  5689.,  6020.,  7220.,  8757., 12506.],
       [  363.,   392.,   775.,   836.,  1335.,  2195.,  2209.,  2769.,
         4262.,  4598.,  5800.,  6137.,  7359.,  8925., 12743.],
       [  371.,   401.,   791.,   853.,  1361.,  2239.,  2252.,  2824.,
         4347.,  4690.,  5916.,  6260.,  7505.,  9099., 12988.],
       [  379.,   409.,   808.,   871.,  1389.,  2284.,  2298.,  2881.,
         4436.,  4786.,  6036.,  6387.,  7655.,  9280., 13243.],
       [  387.,   418.,   825.,   889.,  1418.,  2332.,  2346.,  2941.,
         4529.,  4886.,  6162.,  6520.,  7813.,  9469., 13509.],
       [  395.,   427.,   843.,   908.,  1448.,  2381.,  2396.,  3003.,
         4626.,  4991.,  6293.,  6659.,  7977.,  9666., 13785.],
       [  404.,   437.,   861.,   929.,  1479.,  2433.,  2448.,  3069.,
         4727.,  5099.,  6430.,  6804.,  8149.,  9872., 14074.],
       [  414.,   447.,   881.,   949.,  1512.,  2487.,  2502.,  3137.,
         4833.,  5214.,  6573.,  6955.,  8328., 10086., 14375.],
       [  424.,   458.,   901.,   971.,  1546.,  2544.,  2559.,  3209.,
         4944.,  5333.,  6723.,  7114.,  8515., 10311., 14690.],
       [  434.,   469.,   923.,   994.,  1582.,  2603.,  2619.,  3284.,
         5060.,  5458.,  6880.,  7279.,  8711., 10545., 15019.],
       [  445.,   481.,   945.,  1018.,  1620.,  2666.,  2682.,  3363.,
         5182.,  5589.,  7044.,  7453.,  8916., 10791., 15363.],
       [  457.,   494.,   969.,  1044.,  1659.,  2731.,  2748.,  3446.,
         5310.,  5727.,  7217.,  7636.,  9132., 11048., 15723.],
       [  469.,   507.,   993.,  1070.,  1701.,  2801.,  2818.,  3534.,
         5445.,  5872.,  7398.,  7827.,  9358., 11319., 16102.],
       [  482.,   521.,  1019.,  1098.,  1745.,  2874.,  2891.,  3626.,
         5587.,  6025.,  7589.,  8029.,  9596., 11603., 16499.],
       [  495.,   535.,  1047.,  1128.,  1791.,  2950.,  2968.,  3723.,
         5736.,  6185.,  7790.,  8241.,  9846., 11902., 16917.],
       [  510.,   551.,  1076.,  1159.,  1840.,  3032.,  3050.,  3826.,
         5894.,  6355.,  8001.,  8464., 10109., 12217., 17357.]])

paces = np.array([
    [1000 * (time / distances[i]) for i, time in enumerate(row) ] for row in times
])

def calc_vdot(input_distance, pace):
    if input_distance < distances[0] or input_distance > distances[-1]:
        raise ValueError("Enter distance between 1500m and 30k")
    for i, distance in enumerate(distances):
        if distance > input_distance: 
            dist_index = i-1
            break
    dist_extra = (input_distance - distances[dist_index]) / (distances[dist_index+1] - distances[dist_index])
    paces_lower = paces[:, dist_index]
    paces_higher = paces[:, dist_index+1]
    paces_for_dist = paces_lower + dist_extra * (paces_higher - paces_lower)
    f = interpolate.interp1d(paces_for_dist, vdots, kind="quadratic")
    return f(pace)


def calc_pace(input_distance, input_vdot):
    for i, vdot in enumerate(vdots):
        if input_vdot > vdot:
            vdot_index = i
            break
    vdot_extra = (input_vdot - vdots[vdot_index]) / (vdots[vdot_index-1] - vdots[vdot_index])
    paces_higher = paces[vdot_index]
    paces_lower = paces[vdot_index + 1]

    paces_for_vdot = paces_lower + vdot_extra * (paces_higher - paces_lower)
    f = interpolate.InterpolatedUnivariateSpline(distances, paces_for_vdot)
    return f(input_distance)

def calc_relative_effort(vdot, distance, time):
    pace = 1000 * time / distance
    max_pace = calc_pace(distance, vdot)
    return max_pace / pace

def get_interval_relative_efforts(id):
    strava_client = StravaClient()
    laps = strava_client.get_activity_laps(id)
    relative_efforts = np.array([calc_relative_effort(my_vdot, lap["distance"], lap["elapsed_time"]) for lap in laps])
    key_laps = [effort > 0.8 for effort in relative_efforts]
    condensed_laps = []
    current_sum_dist = 0
    current_sum_time = 0
    for (key, lap) in zip(key_laps, laps):
      if key:
        current_sum_dist += lap["distance"]
        current_sum_time += lap["elapsed_time"]
      else:
        if current_sum_time > 0 and current_sum_dist > 0:
          condensed_laps.append({
            "distance": current_sum_dist,
            "elapsed_time": current_sum_time
          })
          current_sum_time, current_sum_dist = 0, 0
        else:
          continue
    return np.array([calc_relative_effort(my_vdot, lap["distance"], lap["elapsed_time"]) for lap in condensed_laps])
    # return np.array([effort for effort in relative_efforts if effort > 0.8])

def plot_session(id):
    session = get_interval_relative_efforts(id)

    plt.plot(range(len(session)), session)
    plt.xlabel('Lap number')
    plt.ylabel('Relative performance')
    fig = plt.gcf()
    plt_html = mpld3.fig_to_html(fig)
    plt.close()
    return plt_html

def plot_sessions(ids):
    print(ids)
    ids.reverse()
    sessions = []
    averages = []
    for id in ids:
        session = get_interval_relative_efforts(id)
        if len(session) == 0:
            continue
        session_average = sum(session)/len(session);
        averages.append(session_average)
        sessions.append(session)
        # plt.plot(range(len(session)), session)
        # plt.xlabel('Lap number')
        # plt.ylabel('Relative performance')
        # plt.show()

    plt.plot(averages)
    plt.xlabel("Session number")
    plt.ylabel("Relative performance avg")
    fig = plt.gcf()
    plt_html = mpld3.fig_to_html(fig)
    plt.close()
    return plt_html

my_vdot = calc_vdot(5000, 218)


# plot_sessions([
#   6153412170,
#   6137672747,
#   6113520079,
#   6103805252,
#   6078877849, 
#   6068736116, 
#   6044217548, 
#   6051368270, 
#   6034429038, 
#   6015752489, 
#   6008096244, 
#   5971572029,
#   5960607711,
#   5933787903,
#   5922942181,
#   5858082542,
#   5847047880,
#   5809042228,
#   5771285481,
#   5746728779
#   ])


#http://www.strava.com/oauth/authorize?client_id=[REPLACE_WITH_YOUR_CLIENT_ID]&response_type=code&redirect_uri=http://localhost/exchange_token&approval_prompt=force&scope=profile:read_all,activity:read_all

# paces_raw = np.array([
#     ["3:23.5", "3:39.6", "7:14.1", "7:48.9", "12:37", "20:50", "20:58", "26:19", "40:17", "43:26", "54:40", "57:50", "1:09:33", "1:24:33", "2:01:10"],
#     ["3:25.5", "3:41.8", "7:18.5", "7:53.7", "12:45", "21:02", "21:10", "26:34", "40:42", "43:53", "55:14", "58:25", "1:10:15", "1:25:25", "2:02:24"],
#     ["3:27.6", "3:44.1", "7:23.1", "7:58.7", "12:53", "21:16", "21:24", "26:51", "41:06", "44:19", "55:48", "59:01", "1:10:59", "1:26:18", "2:03:40"],
#     ["3:29.7", "3:46.4", "7:27.8", "8:03.7", "13:01", "21:29", "21:37", "27:07", "41:32", "44:47", "56:23", "59:38", "1:11:43", "1:27:12", "2:04:57"],
#     ["3:31.9", "3:48.7", "7:32.5", "8:08.9", "13:09", "21:42", "21:50", "27:24", "41:58", "45:15", "56:58", "1:00:15", "1:12:28", "1:28:07", "2:06:17"],
#     ["3:34.2", "3:51.2", "7:37.5", "8:14.2", "13:18", "21:56", "22:04", "27:41", "42:25", "45:44", "57:34", "1:00:54", "1:13:15", "1:29:04", "2:07:38"],
#     ["3:36.5", "3:53.7", "7:43", "8:20", "13:26", "22:10", "22:18", "27:59", "42:52", "46:13", "58:12", "1:01:34", "1:14:03", "1:30:02", "2:09:02"],
#     ["3:38.8", "3:56.2", "7:48", "8:25", "13:35", "22:24", "22:32", "28:17", "43:20", "46:44", "58:51", "1:02:15", "1:14:52", "1:31:02", "2:10:27"],
#     ["3:41", "3:58", "7:53", "8:31", "13:44", "22:39", "22:48", "28:36", "43:49", "47:15", "59:30", "1:02:56", "1:15:41", "1:32:02", "2:11:54"],
#     ["3:44", "4:02", "7:58", "8:37", "13:54", "22:55", "23:03", "28:55", "44:18", "47:46", "1:00:10", "1:03:39", "1:16:33", "1:33:05", "2:13:23"],
#     ["3:46", "4:04", "8:04", "8:43", "14:03", "23:10", "23:18", "29:14", "44:48", "48:19", "1:00:52", "1:04:23", "1:17:26", "1:34:09", "2:14:55"],
#     ["3:49", "4:07", "8:10", "8:49", "14:13", "23:26", "23:34", "29:34", "45:19", "48:52", "1:01:34", "1:05:08", "1:18:20", "1:35:14", "2:16:29"],
#     ["3:52", "4:10", "8:16", "8:55", "14:23", "23:42", "23:51", "29:55", "45:51", "49:27", "1:02:17", "1:05:54", "1:19:15", "1:36:22", "2:18:05"],
#     ["3:54", "4:13", "8:22", "9:02", "14:33", "23:59", "24:08", "30:16", "46:24", "50:02", "1:03:03", "1:06:42", "1:20:13", "1:37:31", "2:19:44"],
#     ["3:57", "4:16", "8:28", "9:09", "14:44", "24:16", "24:25", "30:38", "46:58", "50:39", "1:03:49", "1:07:31", "1:21:11", "1:38:42", "2:21:26"],
#     ["4:00", "4:19", "8:34", "9:16", "14:55", "24:34", "24:43", "31:00", "47:32", "51:16", "1:04:36", "1:08:21", "1:22:11", "1:39:55", "2:23:10"],
#     ["4:03", "4:23", "8:41", "9:23", "15:06", "24:52", "25:01", "31:23", "48:08", "51:55", "1:05:24", "1:09:12", "1:23:13", "1:41:10", "2:24:57"],
#     ["4:06", "4:26", "8:48", "9:30", "15:18", "25:11", "25:20", "31:46", "48:44", "52:34", "1:06:14", "1:10:05", "1:24:16", "1:42:27", "2:26:47"],
#     ["4:10", "4:30", "8:55", "9:37", "15:29", "25:30", "25:40", "32:11", "49:22", "53:15", "1:07:06", "1:11:00", "1:25:22", "1:43:46", "2:28:40"],
#     ["4:13", "4:33", "9:02", "9:45", "15:42", "25:50", "25:59", "32:35", "50:00", "53:56", "1:07:59", "1:11:56", "1:26:29", "1:45:08", "2:30:36"],
#     ["4:16", "4:37", "9:09", "9:53", "15:54", "26:10", "26:20", "33:01", "50:40", "54:39", "1:08:53", "1:12:53", "1:27:38", "1:46:31", "2:32:35"],
#     ["4:20", "4:41", "9:17", "10:01", "16:07", "26:32", "26:41", "33:28", "51:21", "55:23", "1:09:50", "1:13:53", "1:28:49", "1:47:57", "2:34:38"],
#     ["4:24", "4:45", "9:25", "10:10", "16:20", "26:53", "27:03", "33:55", "52:03", "56:09", "1:10:47", "1:14:54", "1:30:02", "1:49:26", "2:36:44"],
#     ["4:27", "4:49", "9:33", "10:18", "16:34", "27:15", "27:25", "34:23", "52:47", "56:56", "1:11:47", "1:15:57", "1:31:18", "1:50:57", "2:38:54"],
#     ["4:31", "4:53", "9:41", "10:27", "16:48", "27:38", "27:49", "34:52", "53:32", "57:45", "1:12:48", "1:17:02", "1:32:35", "1:52:31", "2:41:08"],
#     ["4:35", "4:57", "9:50", "10:37", "17:03", "28:02", "28:13", "35:22", "54:18", "58:35", "1:13:51", "1:18:09", "1:33:55", "1:54:08", "2:43:25"],
#     ["4:39", "5:02", "9:58", "10:46", "17:17", "28:26", "28:36", "35:52", "55:06", "59:26", "1:14:57", "1:19:18", "1:35:18", "1:55:48", "2:45:47"],
#     ["4:44", "5:06", "10:08", "10:56", "17:33", "28:52", "29:02", "36:24", "55:55", "1:00:20", "1:16:05", "1:20:30", "1:36:44", "1:57:31", "2:48:14"],
#     ["4:48", "5:11", "10:17", "11:06", "17:49", "29:18", "29:29", "36:57", "56:46", "1:01:14", "1:17:14", "1:21:43", "1:38:11", "1:59:17", "2:50:45"],
#     ["4:53", "5:16", "10:27", "11:17", "18:05", "29:45", "29:55", "37:31", "57:39", "1:02:12", "1:18:26", "1:23:00", "1:39:43", "2:01:07", "2:53:20"],
#     ["4:57", "5:21", "10:37", "11:28", "18:22", "30:12", "30:23", "38:06", "58:33", "1:03:10", "1:19:40", "1:24:18", "1:41:16", "2:03:00", "2:56:01"],
#     ["5:02", "5:27", "10:47", "11:39", "18:40", "30:41", "30:52", "38:42", "59:30", "1:04:12", "1:20:57", "1:25:40", "1:42:53", "2:04:58", "2:58:47"],
#     ["5:07", "5:32", "10:58", "11:50", "18:58", "31:11", "31:23", "39:20", "1:00:28", "1:05:14", "1:22:17", "1:27:04", "1:44:34", "2:06:59", "3:01:39"],
#     ["5:13", "5:38", "11:09", "12:02", "19:17", "31:42", "31:54", "39:59", "1:01:29", "1:06:20", "1:23:39", "1:28:31", "1:46:17", "2:09:04", "3:04:36"],
#     ["5:18", "5:44", "11:21", "12:15", "19:36", "32:14", "32:26", "40:39", "1:02:31", "1:07:27", "1:25:05", "1:30:02", "1:48:05", "2:11:13", "3:07:39"],
#     ["5:24", "5:50", "11:33", "12:28", "19:57", "32:47", "32:59", "41:21", "1:03:36", "1:08:37", "1:26:33", "1:31:35", "1:49:56", "2:13:27", "3:10:49"],
#     ["5:30", "5:56", "11:45", "12:41", "20:18", "33:22", "33:34", "42:04", "1:04:44", "1:09:50", "1:28:05", "1:33:12", "1:51:52", "2:15:47", "3:14:06"],
#     ["5:36", "6:03", "11:58", "12:55", "20:39", "33:58", "34:10", "42:50", "1:05:53", "1:11:05", "1:29:40", "1:34:53", "1:53:52", "2:18:11", "3:17:29"],
#     ["5:42", "6:10", "12:12", "13:10", "21:02", "34:34", "34:47", "43:36", "1:07:06", "1:12:24", "1:31:19", "1:36:38", "1:55:56", "2:20:40", "3:21:00"],
#     ["5:49", "6:17", "12:26", "13:25", "21:25", "35:13", "35:26", "44:25", "1:08:22", "1:13:46", "1:33:02", "1:38:27", "1:58:06", "2:23:16", "3:24:39"],
#     ["5:56", "6:25", "12:40", "13:40", "21:50", "35:54", "36:07", "45:16", "1:09:40", "1:15:10", "1:34:49", "1:40:20", "2:00:20", "2:25:57", "3:28:26"],
#     ["6:03", "6:32", "12:55", "13:56", "22:15", "36:35", "36:49", "46:09", "1:11:02", "1:16:38", "1:36:40", "1:42:17", "2:02:39", "2:28:45", "3:32:23"],
#     ["6:11", "6:41", "13:11", "14:13", "22:41", "37:19", "37:32", "47:04", "1:12:27", "1:18:10", "1:38:36", "1:44:20", "2:05:05", "2:31:39", "3:36:28"],
#     ["6:19", "6:49", "13:28", "14:31", "23:09", "38:04", "38:18", "48:01", "1:13:56", "1:19:46", "1:40:36", "1:46:27", "2:07:35", "2:34:40", "3:40:43"],
#     ["6:27", "6:58", "13:45", "14:49", "23:38", "38:52", "39:06", "49:01", "1:15:29", "1:21:26", "1:42:42", "1:48:40", "2:10:13", "2:37:49", "3:45:09"],
#     ["6:35", "7:07", "14:03", "15:08", "24:08", "39:41", "39:56", "50:03", "1:17:06", "1:23:11", "1:44:53", "1:50:59", "2:12:57", "2:41:06", "3:49:45"],
#     ["6:44", "7:17", "14:21", "15:29", "24:39", "40:33", "40:48", "51:09", "1:18:47", "1:24:59", "1:47:10", "1:53:24", "2:15:49", "2:44:32", "3:54:34"],
#     ["6:54", "7:27", "14:41", "15:49", "25:12", "41:27", "41:42", "52:17", "1:20:33", "1:26:54", "1:49:33", "1:55:55", "2:18:48", "2:48:06", "3:59:35"],
#     ["7:04", "7:38", "15:01", "16:11", "25:46", "42:24", "42:39", "53:29", "1:22:24", "1:28:53", "1:52:03", "1:58:34", "2:21:55", "2:51:51", "4:04:50"],
#     ["7:14", "7:49", "15:23", "16:34", "26:22", "43:23", "43:39", "54:44", "1:24:20", "1:30:58", "1:54:40", "2:01:19", "2:25:11", "2:55:45", "4:10:19"],
#     ["7:25", "8:01", "15:45", "16:58", "27:00", "44:26", "44:42", "56:03", "1:26:22", "1:33:09", "1:57:24", "2:04:13", "2:28:36", "2:59:51", "4:16:03"],
#     ["7:37", "8:14", "16:09", "17:24", "27:39", "45:31", "45:48", "57:26", "1:28:30", "1:35:27", "2:00:17", "2:07:16", "2:32:12", "3:04:08", "4:22:03"],
#     ["7:49", "8:27", "16:33", "17:50", "28:21", "46:41", "46:58", "58:54", "1:30:45", "1:37:52", "2:03:18", "2:10:27", "2:35:58", "3:08:39", "4:28:22"],
#     ["8:02", "8:41", "16:59", "18:18", "29:05", "47:54", "48:11", "1:00:26", "1:33:07", "1:40:25", "2:06:29", "2:13:49", "2:39:56", "3:13:23", "4:34:59"],
#     ["8:15", "8:55", "17:27", "18:48", "29:51", "49:10", "49:28", "1:02:03", "1:35:36", "1:43:05", "2:09:50", "2:17:21", "2:44:06", "3:18:22", "4:41:57"],
#     ["8:30", "9:11", "17:56", "19:19", "30:40", "50:32", "50:50", "1:03:46", "1:38:14", "1:45:55", "2:13:21", "2:21:04", "2:48:29", "3:23:37", "4:49:17"]
# ])
# paces_ints = np.array([
#     [convert_to_int(pace) for pace in row] for row in paces_raw
# ])

# def pace_calc(x, a, b, c, d, e):
#     # return a * x**3 + b*x**2 + c*x + d
#     return a * np.exp(-x * b) + c * np.exp(-x * d) + e

# def linear_scale(dist, ratio, value):
#     x = 0.00015
#     return ratio * value - (dist - 1*mile) * x

# distances = [1*mile, 3000, 2*mile, 4000, 5000, 6000, 4*mile, 8000, 5*mile, 10000, 12000, 15000, 10*mile, 13.1*mile]


# distance_data_lh = [1*mile, 3000, 2*mile, 4000, 5000, 6000, 4*mile, 8000, 5*mile, 10000, 12000, 15000, 10*mile, 13.1*mile]
# pace_data_lh = [197, 207, 209, 213, 216, 218, 219, 222, 222, 225, 228, 231, 232, 235]
# distance_data_vdot = [1*mile, 3000, 2*mile, 3*mile, 5000, 10000, 15000, 13.1*mile]
# pace_data_vdot = [196, 208, 209, 216, 216, 224, 229, 235]


# pace_data_lh_fast= [155, 161, 163, 166, 168, 170, 171, 173, 173, 175, 177, 179, 180, 183]

# popt, pcov = curve_fit(pace_calc, distance_data_lh, pace_data_lh, bounds=([-60, 0, 200, -1, -100], [-30, 0.01, 260, 1, 0]))

# pace_data_calc = [pace_calc(dist, *popt) for dist in distance_data_lh]

# pace_data_calc_fast = [linear_scale(distance_data_lh[i], 155/197, pace) for i, pace in enumerate(pace_data_calc)]

# # plt.plot(distance_data_lh, pace_data_lh, color='blue')
# # plt.plot(distance_data_vdot, pace_data_vdot, color='red')
# # plt.plot(distance_data_lh, pace_data_calc, color='green')
# # plt.plot(distance_data_lh, pace_data_lh_fast, color='black')
# # plt.plot(distance_data_lh, pace_data_calc_fast, color='orange')
# # plt.show()

# def convert_to_int(string):
#     try:
#         t = time.strptime(string, "%M:%S")
#     except Exception:
#         try:
#             t = time.strptime(string, "%M:%S.%f")
#         except Exception:
#             t = time.strptime(string, "%H:%M:%S")
#     return datetime.timedelta(hours = t.tm_hour, minutes = t.tm_min, seconds = t.tm_sec).total_seconds()